
### 리눅스 커널 (Linux Kernel)
- 오픈소스이다. ==모놀리식 유닉스 계열 컴퓨터 운영체제 커널==이다.
- 리누스 토르발즈가 개인 PC에서 사용하기 위해 개발됐었다.
- C언어와 어셈블러로 작성됐다.
- 현존하는 가장 큰 오픈소스 프로젝트 중 하나이다.

### 커널(Kernel) ?
- ==컴퓨터 운영체제의 핵심==이 되는 컴퓨터 프로그램이다.
	- ==메모리 내 커널 영역==이라는 별도의 영역에 ==상주하여 동작한다.== => Memory Resident
		- 일반적인 프로그램들은 Disk에 저장되어 있다가, 요청이 들어오면 메모리에 로드된다. 사용이 종료되면 메모리에서 해제되고 Disk로 돌아간다.
- 커널은 하드웨어와 어플리케이션을 연결하는 역할(인터페이스)을 한다.
- 운영체제의 다른 부분 및 어플리케이션 수행에 필요한 여러가지 서비스를 지원한다.
	- 어플리케이션은 User mode에서 동작한다. 하드웨어에 직접 접근하지 못한다.
	  따라서, 시스템 콜을 통해 커널에게 하드웨어 자원을 요청한다.
	  커널은 수신한 시스템 콜의 종류에 따라 동작을 수행하고 결과를 어플리케이션에 반환한다.
	- #참고 System Call Trace 명령어 : `strace`

### 커널의 주요 기능
#### 1. 하드웨어 관리 및 추상화
- Device Driver만이 하드웨어가 제공하는 기능이나 프로토콜에 관여한다.
- 일반 사용자 어플리케이션은 하드웨어에 직접적으로 접근하지 않는다.
  (하드웨어에 종속적인 작업이 필요하지 않다.)
	- 덕분에, 어플리케이션들은 파일 저장 매체 종류를 고려하지 않고 I/O가 가능하다. 
	  => 블록 I/O 레이어
	- 또한, 실제 파일이 저장된 위치를 고려하지 않고 사용 가능하다. => 파일시스템
		- 어플리케이션은 파일의 데이터가 연속적으로 저장되어있다고 인식한다. (Logical)
		- 하지만, 실제로는 데이터들이 Disk 내 불연속적으로 저장되어있다. 커널이 어플리케이션에서 연속적으로 인식할 수 있도록 지원한다.

#### 2. 프로세스와 쓰레드 관리
- CPU 타임 공유
	- 커널의 프로세스 스케쥴러 기능 덕분에, CPU 코어 개수보다 더 많은 수의 프로그램이 동시에 실행 가능하다.
		- 각 프로세스가 아주 짧은 시간 단위로 CPU를 점유한다. (Context Switching)
- 메모리 보호
	- 프로세스가 자신에게 할당되지 않은 영역의 메모리에 접근하는 것을 차단한다.
	- ASLR (Address Space Layout Randomization)
		- 프로세스가 실행될 때마다, 무작위의 메모리 주소 공간에 배치시킨다.
		  프로세스가 배치될 메모리 주소를 예측하여 악의적인 영향을 끼칠 수 없게 한다.

#### 3. 메모리 관리
- 개별 프로세스에 가상의 연속된 메모리 공간을 제공한다. (VAS, Virtual Address Space)
	- 32Bit 머신 : 4GB (Gigabyte, 10^9)
	- 64Bit 머신 : 16EB (Exabyte, 10^18)
- 실제는 물리 메모리 내에서 같이 섞여서 할당(배치)되고 해제된다.
- Paging 기능 덕분에, 물리 메모리보다 큰 크기의 프로그램이 동시에 실행 가능하다. (Page tables)

#### 4. I/O 관리
- 리눅스 내에서 "모든 것은 File(File Descriptor) 이다."
- VFS(Virtual File System) 덕분에, 
  하부 시스템 구성에 상관없이 파일 입출력 형식으로 제어 가능하다.
